import Head from "next/head";
import { Inter } from "next/font/google";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import { useState, useEffect } from "react";
import Link from "next/link";
import axios from "axios";
import query from "../public/Query";

const inter = Inter({ subsets: ["latin"] });

// Define getBlog function
export async function getBlog(Quer = query[Math.floor(Math.random() * query.length)].q) {
  try {
    const response = await axios.post("/api/blog", {
      tag: Quer
    });
    const data = response.data.Blog;
    const images = response.data.Images;
    const tag = response.data.Tag;
    return { blog: data.split(".").map(para => para.replace(/\*/g, "").trim() + "."), images, tag };
  } catch (err) {
    console.error('Error fetching blog:', err);
    throw new Error('Error fetching blog');
  }
}

export default function Home() {
  const [blog, setBlog] = useState([]);
  const [images, setImages] = useState(null);
  const [title, setTitle] = useState("");
  const [loader, setLoader] = useState(false);
  const [color, setColor] = useState(null);

  useEffect(() => {
    async function fetchData() {
      try {
        setLoader(true);
        const { blog, images, tag } = await getBlog();
        setBlog(blog);
        setImages(images);
        setTitle(tag);
        setLoader(false);
      } catch (err) {
        setLoader(false);
        console.log('Error fetching blog:', err);
      }
    }
    fetchData();
  }, []);

  const format_para = (para, ind) => {
    const parts = para.split(/(\*\*.*?\*\*)/g);
    return parts.map((part, index) => {
      if (part.startsWith("**") && part.endsWith("**")) {
        return (
          <div key={index}>
            <h3>{part.slice(2, -2)}</h3>
            <br></br>
          </div>
        );
      } else {
        return part;
      }
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.blogBox}>
          {!loader && <h1 style={{ fontSize: '50px' }}>{title}</h1>}
          {!loader && blog.length > 0 ? (
            blog.map((para, index) => (
              <article key={index}>
                {format_para(para, index)}
                <center>
                  {images && images.length > index && images[index] ? (
                    <Image
                      key={index}
                      src={images[index].src.landscape}
                      height={500}
                      width={800}
                      alt={`Image ${index}`}
                      className={styles.img}
                    />
                  ) : null}
                </center>
                <br></br><br></br>
              </article>
            ))
          ) : <center>
            <div className={styles.loader}></div>
          </center>
          }
        </div>
        <div className={styles.linkBox}>
          {query.map((ele, index) => (
            <Link key={index} href={`/newPage?tag=${encodeURIComponent(ele.q)}`} className={styles.query}>
              <p key={index} style={{ borderLeft: color == index ? '10px solid #ffff' : '1px solid #fffff' }}>{ele.q}</p>
            </Link>
          ))}
        </div>
      </main>
    </>
  );
}
